MTD COMPETITIVE PROGRAMMING TRAINING

DAY 1 THURSDAY 06-03-2025

CREATING A NEW REPO IN GIT

-CREATE NEW REPO 
-GIVE A NAME FOR REPO
-GIVE A SUITABLE DESCRIPTION
-CHECK ADD README FILE BOX

KEYBOARD SHORTCUTS

-ctrl u for lowercase
-ctrl shift u for uppercase
-CTRL PLUS ANYTHING USES A WHOLE WORD
cd for changing drectory


IMPORTANT GIT COMMANDS

git status
//To know the current status of our repo

git clone https://github.com/Bharath12p/mtd_c_py 
// to download a repo with example

git pull origin main
//Command to download the updated repo from server to local machine

git clone <PAT><URL>
//to access pat 

commands required to upload files from local repo to remote:
git add .
// Git will mark all the files that need to be updated

git commit -m "notes file of the mtd training is added"
//Git creates an objet that will incl all the files need to be uploaded & also it is secured (encryptiom)

git push origin main
//the obj is sent to the server


//To make our computer recognize our git git account, we must run these 2 configurtion
git config --global user.name "bharath12p"
git config --global user.email "bharath2004bp@gmail.com"





steps to create an new pat in github:
go to settings -> next window-> scroll down left bottom corner-> developer settings -> top left -> click personal access token.

steps to run program in cmd
gcc <pname.c>
a.exe

TYPECASTING 

float num = 11 / 3; //implicit typecasting
printf("%f", num); //upcasting from int to float

int num = 11/3.0; //11 - 11.0 double to int
printf("%d",num); //downcast from double to int

int num = (int) 11.5f/2.0;
printf("%d",num);



DAY1

 program1
 
 //accept the number from the user and check if it is even or not
	#include<stdio.h>
	void main()
	{
		int num = 0;
		printf("Enter the number to be checked: ");
		scanf("%d",&num);
		if(num%2==0)
			printf("%d is even");
		else
			printf("%d is nit even");

	}
	
DAY 2 FRIDAY 07-03-2025

Arithmetic Operators: + - * / %

All are binary operator
I/p are numbers and also the output
used with infix notations
To perform any arithmetic operarions, DT of both the operands must be
Left to RIght associatitvity w.r.t reading the values or expressiomns
The calculations happens the programmer given infix exp must be conerted to postfix.
The operators have iffferent hierarchy (precedence).

--------------------------------------------------------------------------------------

Relational operators: > < == != >= <=

for int = 1 i <= 10 i++ //10 iterations

[10, 20]
num>=10 num <=20

(10, 30)
num > 10 and num < 30

--------------------------------------------------------------------------------------

Logical operatirs: & && | || !

inputs and outputs are boolean

PROGRAM 1:

#include<stdio.h>

int main()
{
    int a = 13, b = 2, c = -8;
    if(a <= b & ++b == --c || a>c)
        puts("Tadiamdamol");
    else
        puts("Pushpagiri");
    printf("%d %d %d \n", a, b, c);

}

PROGRAM 2:

#include<stdio.h>

int main()
{
    int a = 3, b = -2, c = -8;
    b++;
    printf("%d %d %d\n", a, b, c);
    ++b;
    printf("%d %d %d %d\n",a ,b ,c);
    c = a--;
    printf("%d %d %d %d\n",a ,b ,c);
    b = ++c;
    printf("%d %d %d %d\n",a ,b ,c);
    c = a-- + --a;
    printf("%d %d %d %d\n",a ,b ,c);
    int n=10;
    printf("%d %d %d %d", --n, ++n, n++, n--);
    
    return  0;
}




	






